cv2.findContours() Fonksiyonundaki hierarchy Nedir?
cv2.findContours() fonksiyonu, bir gÃ¶rÃ¼ntÃ¼deki konturlarÄ± bulur ve iki ÅŸey dÃ¶ndÃ¼rÃ¼r:

contours â†’ Bulunan konturlarÄ±n listesi
hierarchy â†’ Konturlar arasÄ±ndaki ebeveyn-Ã§ocuk (hiyerarÅŸik) iliÅŸkileri
Ã–ncelikle, Kontur (Contour) Nedir?
Bir gÃ¶rÃ¼ntÃ¼de aynÄ± renkteki veya yoÄŸunluktaki bÃ¶lgelerin sÄ±nÄ±rlarÄ±nÄ± temsil eden kapalÄ± eÄŸrilerdir.

Ã–rnek:
Bir dairenin kenarlarÄ±nÄ± bir kontur olarak dÃ¼ÅŸÃ¼nebilirsin. EÄŸer bir kÃ¼Ã§Ã¼k daire, bÃ¼yÃ¼k bir dairenin iÃ§inde yer alÄ±yorsa, bunlar ebeveyn-Ã§ocuk iliÅŸkisine sahiptir.

hierarchy Ne Ä°Ã§erir?
hierarchy dizisi, her kontur iÃ§in 4 deÄŸerden oluÅŸan bir dizi (NumPy array) dÃ¶ndÃ¼rÃ¼r:

python
Kopyala
DÃ¼zenle
[Next, Previous, First_Child, Parent]
Bunlar ÅŸu anlama gelir:

Next â†’ AynÄ± seviyedeki bir sonraki konturun indexâ€™i
Previous â†’ AynÄ± seviyedeki bir Ã¶nceki konturun indexâ€™i
First_Child â†’ Konturun ilk iÃ§ konturunun (Ã§ocuÄŸunun) indexâ€™i
Parent â†’ Konturun iÃ§inde bulunduÄŸu konturun (ebeveyninin) indexâ€™i
EÄŸer herhangi bir alan yoksa, o deÄŸerin yerine -1 gelir.

Ã–rnek KullanÄ±m
Bir gÃ¶rÃ¼ntÃ¼de konturlarÄ±n nasÄ±l bulunduÄŸunu ve hierarchyâ€™nin nasÄ±l Ã§alÄ±ÅŸtÄ±ÄŸÄ±nÄ± gÃ¶relim:

python
Kopyala
DÃ¼zenle
import cv2
import numpy as np

# Siyah bir gÃ¶rÃ¼ntÃ¼ oluÅŸtur
image = np.zeros((400, 400), dtype=np.uint8)

# Beyaz dikdÃ¶rtgenler Ã§iz (farklÄ± iÃ§ iÃ§e geÃ§miÅŸ ÅŸekiller oluÅŸturacaÄŸÄ±z)
cv2.rectangle(image, (50, 50), (350, 350), 255, -1)  # BÃ¼yÃ¼k dikdÃ¶rtgen
cv2.rectangle(image, (100, 100), (300, 300), 0, -1)  # Ä°Ã§erideki kÃ¼Ã§Ã¼k siyah dikdÃ¶rtgen

# KonturlarÄ± bul
contours, hierarchy = cv2.findContours(image, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)

# Hierarchyâ€™yi yazdÄ±r
print("Hierarchy:\n", hierarchy)

# KonturlarÄ± Ã§iz ve gÃ¶ster
image_bgr = cv2.cvtColor(image, cv2.COLOR_GRAY2BGR)
cv2.drawContours(image_bgr, contours, -1, (0, 255, 0), 2)

cv2.imshow("Konturlar", image_bgr)
cv2.waitKey(0)
cv2.destroyAllWindows()
Ã‡Ä±ktÄ±daki hierarchy AÃ§Ä±klamasÄ±
EÄŸer cv2.RETR_TREE kullanÄ±lÄ±rsa, Ã§Ä±ktÄ± ÅŸuna benzer olabilir:

lua
Kopyala
DÃ¼zenle
Hierarchy:
 [[[ 1 -1 -1 -1]
   [-1  0 -1 -1]]]
Bu Ã§Ä±ktÄ±da:

Ä°lk kontur (dÄ±ÅŸtaki dikdÃ¶rtgen) â†’ Bir sonraki kontur var (Next = 1), ama Ã¶nceki yok (Previous = -1), Ã§ocuk yok (First_Child = -1), ebeveyni yok (Parent = -1).
Ä°kinci kontur (iÃ§teki dikdÃ¶rtgen) â†’ Ã–ncesinde bir kontur var (Previous = 0), Ã§ocuk yok (First_Child = -1), ebeveyni var (Parent = 0).
FarklÄ± cv2.RETR_ ModlarÄ± ve hierarchy
HiyerarÅŸi bilgisinin nasÄ±l dÃ¶neceÄŸi, kullanÄ±lan mode parametresine baÄŸlÄ±dÄ±r.

cv2.RETR_ Modu	AÃ§Ä±klama
cv2.RETR_EXTERNAL	Sadece en dÄ±ÅŸtaki konturlarÄ± alÄ±r, iÃ§ konturlarÄ± dikkate almaz. hierarchy dÃ¶ndÃ¼rÃ¼lmez.
cv2.RETR_LIST	TÃ¼m konturlarÄ± alÄ±r, ancak hiÃ§bir hiyerarÅŸik iliÅŸkiyi kaydetmez (her kontur baÄŸÄ±msÄ±zdÄ±r).
cv2.RETR_CCOMP	KonturlarÄ± 2 seviyeli bir hiyerarÅŸi ile dÃ¶ndÃ¼rÃ¼r: dÄ±ÅŸ konturlar (0. seviye) ve iÃ§ delikler (1. seviye).
cv2.RETR_TREE	TÃ¼m iÃ§ iÃ§e geÃ§miÅŸ iliÅŸkileriyle birlikte konturlarÄ± dÃ¶ndÃ¼rÃ¼r.
EÄŸer sadece en dÄ±ÅŸtaki nesneleri istiyorsan:

python
Kopyala
DÃ¼zenle
contours, hierarchy = cv2.findContours(image, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
Bu durumda hierarchy, Ã¶nemli olmaz, Ã§Ã¼nkÃ¼ iÃ§ konturlar hiÃ§ bulunmaz.

Ã–zet
âœ… hierarchy, konturlarÄ±n ebeveyn-Ã§ocuk iliÅŸkisini tutar.
âœ… DÃ¶rt eleman iÃ§erir: Next, Previous, First_Child, Parent.
âœ… Ä°Ã§ iÃ§e geÃ§miÅŸ nesneleri analiz etmek iÃ§in Ã¶nemlidir (Ã–rneÄŸin, bir dairenin iÃ§indeki baÅŸka bir daire gibi).
âœ… FarklÄ± cv2.RETR_ modlarÄ±na baÄŸlÄ± olarak deÄŸiÅŸir.

*-------------------------------------------------**---------


GÃ¼zel bir soru! hierarchy[0], cv2.findContours() fonksiyonunun dÃ¶ndÃ¼rdÃ¼ÄŸÃ¼ Ã§ok boyutlu NumPy dizisinin ilk boyutuna eriÅŸmeyi saÄŸlar. Bunu adÄ±m adÄ±m aÃ§Ä±klayalÄ±m.

Ã–nce cv2.findContours() Ã‡Ä±ktÄ±sÄ±nÄ± HatÄ±rlayalÄ±m
Bu fonksiyon ÅŸu iki deÄŸeri dÃ¶ndÃ¼rÃ¼r:

python
Kopyala
DÃ¼zenle
contours, hierarchy = cv2.findContours(image, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
contours â†’ Tespit edilen konturlarÄ±n listesi.
hierarchy â†’ KonturlarÄ±n ebeveyn-Ã§ocuk iliÅŸkilerini iÃ§eren Ã§ok boyutlu bir NumPy dizisi.
Ã–rnek Ã‡Ä±ktÄ±: hierarchy
Diyelim ki gÃ¶rÃ¼ntÃ¼mÃ¼zde 2 kontur var ve cv2.RETR_TREE kullandÄ±k.
Bu durumda, hierarchy ÅŸu ÅŸekilde bir Ã§Ä±ktÄ± verebilir:

python
Kopyala
DÃ¼zenle
hierarchy = array([[[ 1, -1, -1, -1],  
                    [-1,  0, -1, -1]]], dtype=int32)
Bunu parÃ§alayalÄ±m:

hierarchy.shape â†’ (1, 2, 4)
Bu 3 boyutlu bir dizidir, ama ilk boyut her zaman 1 olur.
Bu yapÄ± ÅŸu anlama gelir:

hierarchy[0] â†’ Ä°lk (ve genellikle tek) boyuta eriÅŸir.
hierarchy[0] ÅŸu listeyi dÃ¶ndÃ¼rÃ¼r:
python
Kopyala
DÃ¼zenle
[[ 1, -1, -1, -1],
 [-1,  0, -1, -1]]
Bu, konturlarÄ±n 2D bir liste olarak temsil edildiÄŸi dÃ¼zleÅŸtirilmiÅŸ bir versiyondur.
Ã–zetle hierarchy[0] Nedir?
ğŸ“Œ hierarchy, (1, N, 4) ÅŸeklinde bir NumPy dizisidir.
ğŸ“Œ hierarchy[0] â†’ Ä°lk boyutu kaldÄ±rarak (N, 4) boyutlu bir diziye Ã§evirir.
ğŸ“Œ hierarchy[0] artÄ±k konturlarÄ±n listesidir ve her konturun [Next, Previous, First_Child, Parent] deÄŸerlerini iÃ§erir.

Kod Ã–rneÄŸi
EÄŸer hierarchy[0] kullanmazsak:

python
Kopyala
DÃ¼zenle
print(hierarchy.shape)  # (1, N, 4)
EÄŸer hierarchy[0] kullanÄ±rsak:

python
Kopyala
DÃ¼zenle
print(hierarchy[0].shape)  # (N, 4)
Bu yÃ¼zden, kodu daha basitleÅŸtirmek iÃ§in ilk boyutu kaldÄ±rÄ±yoruz.

EÄŸer try-except kullanmazsak ve hierarchy None gelirse, hierarchy[0] Ã§aÄŸrÄ±ldÄ±ÄŸÄ±nda TypeError oluÅŸur.
Bu yÃ¼zden try-except ile gÃ¼venli hale getiriyoruz. ğŸš€

SonuÃ§
âœ… hierarchy â†’ (1, N, 4) boyutunda bir NumPy dizisidir.
âœ… hierarchy[0] â†’ (N, 4) boyutuna indirerek daha kolay eriÅŸim saÄŸlar.
âœ… cv2.findContours() her zaman ilk boyutu 1 olan bir dizi dÃ¶ndÃ¼rdÃ¼ÄŸÃ¼ iÃ§in, bu ilk boyutu atÄ±yoruz.

**devamÄ±**
o 1 aslinda en dÄ±ÅŸtaki 3 tane [ var onu kaldÄ±rÄ±yoruz demi
ChatGPT:
Evet, tam olarak doÄŸru anladÄ±n! ğŸ˜„

hierarchy dÃ¶ndÃ¼ÄŸÃ¼nde, aslÄ±nda Ã¼Ã§Ã¼ncÃ¼ bir boyut daha eklenmiÅŸ olur ve hierarchy[0] dediÄŸimizde bu ekstra boyutu kaldÄ±rmÄ±ÅŸ oluruz.

Bunu daha iyi anlaman iÃ§in ÅŸÃ¶yle aÃ§Ä±klayayÄ±m:

hierarchy DÃ¶nÃ¼ÅŸÃ¼:
python
Kopyala
DÃ¼zenle
hierarchy = array([[[ 1, -1, -1, -1],  
                    [-1,  0, -1, -1]]], dtype=int32)
YukarÄ±daki Ã¶rnekte:

Ä°lk boyut (1) â†’ [[...]] â†’ Bir dÄ±ÅŸ liste.
Ä°kinci boyut (2) â†’ Ä°ki kontur var.
ÃœÃ§Ã¼ncÃ¼ boyut (4) â†’ Her kontur iÃ§in [Next, Previous, First_Child, Parent] bilgisi var.
Yani Ã¼Ã§lÃ¼ bir liste yapÄ±sÄ± elde ediyorsun.

hierarchy[0] ile KaldÄ±rmak:
Bu yapÄ±nÄ±n biraz kafa karÄ±ÅŸtÄ±rÄ±cÄ± olmasÄ±nÄ±n sebebi, ilk boyutun gereksiz bir ÅŸekilde 1 olmasÄ±.

hierarchy[0] ile ilk boyutun (dÄ±ÅŸtaki [ ) kaldÄ±rÄ±lmÄ±ÅŸ oluyor.
Yani, hierarchy[0] ÅŸu hale gelir:
python
Kopyala
DÃ¼zenle
[[ 1, -1, -1, -1],
 [-1,  0, -1, -1]]
Bu artÄ±k 2 boyutlu bir liste olup, konturlarÄ±n hiyerarÅŸisini temsil eder.

SonuÃ§:
ğŸ”¹ hierarchy[0], aslÄ±nda ilk dÄ±ÅŸtaki gereksiz kÃ¶ÅŸeli parantezleri kaldÄ±rarak, sadece konturlarÄ±n iliÅŸkilerini elde etmeni saÄŸlar.
ğŸ”¹ Bu ÅŸekilde, hierarchy[0] ile (N, 4) boyutunda bir NumPy dizisi elde edersin ve hierarchy[1], hierarchy[2] gibi indekslerle her bir konturun iliÅŸkilerini kolayca inceleyebilirsin. 